schema {
  query: Query
  mutation: Mutation
}

type Query {
  getImageUploadUrl(extension: String, contentType: String): AWSURL!
    @aws_auth(cognito_groups: ["owner", "host"])

  getMyPets(limit: Int!, nextToken: String): PetsPage!
    @aws_auth(cognito_groups: ["owner"])

  search(
    query: String!
    mode: SearchMode!
    limit: Int!
    nextToken: String
  ): SearchResultsPage!

  listHosts(limit: Int!, nextToken: String): HostsPage!

  listMyBookings(limit: Int!, nextToken: String): BookingsPage!
    @aws_auth(cognito_groups: ["owner"])
}

type Mutation {
  createPet(petInput: PetInput!): Pet! @aws_auth(cognito_groups: ["owner"])

  editPet(petInput: EditPetInput!): Pet! @aws_auth(cognito_groups: ["owner"])

  createBookingRequest(bookingRequestInput: BookingRequestInput!): Booking!
    @aws_auth(cognito_groups: ["owner"])

  acceptBookingRequest(bookingId: ID!): Boolean!
    @aws_auth(cognito_groups: ["host"])
}

input PetInput {
  name: String!
  birthdate: AWSDate!
  bio: String
  type: PetType!
}

input EditPetInput {
  id: ID!
  name: String!
  birthdate: AWSDate!
  bio: String!
}

input BookingRequestInput {
  hostId: ID!
  petId: ID!
  fromDate: AWSDateTime!
  toDate: AWSDateTime!
}

interface IProfile {
  id: ID!
  name: String!
  imageUrl: AWSURL
  birthdate: AWSDate!
  bio: String
  address: String!
  cellphone: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
}

type PetOwnerProfile implements IProfile {
  id: ID!
  name: String!
  imageUrl: AWSURL
  birthdate: AWSDate!
  bio: String
  address: String!
  cellphone: String!
  pets: PetsPage!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
}

type PetHostProfile implements IProfile {
  id: ID!
  name: String!
  imageUrl: AWSURL
  birthdate: AWSDate!
  pricePerNight: Float!
  bio: String
  address: String!
  cellphone: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
}

type Pet {
  id: ID!
  owner: PetOwnerProfile!
  name: String!
  birthdate: AWSDate!
  bio: String
  type: PetType!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
}

type PetsPage {
  pets: [Pet!]
  nextToken: String
}

type HostsPage {
  hosts: [PetHostProfile!]
  nextToken: String
}

type BookingsPage {
  bookings: [Booking!]
  nextToken: String
}

union SearchResult = PetOwnerProfile | Pet

type SearchResultsPage {
  results: [SearchResult!]
  nextToken: String
}

type Booking {
  id: ID!
  owner: PetOwnerProfile!
  host: PetHostProfile!
  pet: Pet!
  fromDate: AWSDateTime!
  toDate: AWSDateTime!
  totalNights: Int!
  pricePerNight: Float!
  totalPrice: Float!
  status: BookingStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  deletedAt: AWSDateTime
}

enum PetType {
  Cat
  Dog
  Bird
  Rodent
}

enum SearchMode {
  People
}

enum ResidenceType {
  House
  Apartment
}

enum BookingStatus {
  Pending
  Rejected
  Accepted
  Canceled
  Completed
}
